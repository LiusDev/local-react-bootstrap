"use strict";(self.webpackChunkreact_bootstrap_website=self.webpackChunkreact_bootstrap_website||[]).push([[945],{40945:e=>{e.exports=JSON.parse('{"description":"","props":{"bsPrefix":{"type":{"name":"string"},"required":false,"description":"","doclets":{"default":"\'dropdown\'"}},"drop":{"type":{"name":"enum","value":[{"value":"\'up\'","computed":false},{"value":"\'up-centered\'","computed":false},{"value":"\'start\'","computed":false},{"value":"\'end\'","computed":false},{"value":"\'down\'","computed":false},{"value":"\'down-centered\'","computed":false}]},"required":false,"description":"Determines the direction and location of the Menu in relation to it\'s Toggle.","doclets":{}},"as":{"type":{"name":"elementType"},"required":false,"description":"","doclets":{}},"align":{"type":{"name":"custom","raw":"alignPropType"},"required":false,"description":"Aligns the dropdown menu to the specified side of the Dropdown toggle. You can\\nalso align the menu responsively for breakpoints starting at `sm` and up.\\nThe alignment direction will affect the specified breakpoint or larger.\\n\\n*Note: Using responsive alignment will disable Popper usage for positioning.*","doclets":{"type":"{\\"start\\"|\\"end\\"|{ sm: \\"start\\"|\\"end\\" }|{ md: \\"start\\"|\\"end\\" }|{ lg: \\"start\\"|\\"end\\" }|{ xl: \\"start\\"|\\"end\\"}|{ xxl: \\"start\\"|\\"end\\"} }"}},"show":{"type":{"name":"bool"},"required":false,"description":"Whether or not the Dropdown is visible.","doclets":{"controllable":"onToggle"}},"onToggle":{"type":{"name":"func"},"required":false,"description":"A callback fired when the Dropdown wishes to change visibility. Called with the requested\\n`show` value, the DOM event, and the source that fired it: `\'click\'`,`\'keydown\'`,`\'rootClose\'`, or `\'select\'`.\\n\\n```js\\nfunction(\\n  nextShow: boolean,\\n  meta: ToggleMetadata,\\n): void\\n```","doclets":{"controllable":"show"}},"onSelect":{"type":{"name":"func"},"required":false,"description":"A callback fired when a menu item is selected.\\n\\n```js\\n(eventKey: any, event: Object) => any\\n```","doclets":{}},"focusFirstItemOnShow":{"type":{"name":"enum","value":[{"value":"false","computed":false},{"value":"true","computed":false},{"value":"\'keyboard\'","computed":false}]},"required":false,"description":"Controls the focus behavior for when the Dropdown is opened. Set to\\n`true` to always focus the first menu item, `keyboard` to focus only when\\nnavigating via the keyboard, or `false` to disable completely\\n\\nThe Default behavior is `false` **unless** the Menu has a `role=\\"menu\\"`\\nwhere it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).","doclets":{}},"navbar":{"type":{"name":"bool"},"required":false,"description":"","doclets":{"private":true}},"autoClose":{"type":{"name":"enum","value":[{"value":"true","computed":false},{"value":"\'outside\'","computed":false},{"value":"\'inside\'","computed":false},{"value":"false","computed":false}]},"required":false,"description":"Controls the auto close behaviour of the dropdown when clicking outside of\\nthe button or the list.","doclets":{}}}}')}}]);