"use strict";(self.webpackChunkreact_bootstrap_website=self.webpackChunkreact_bootstrap_website||[]).push([[7091],{97091:e=>{e.exports=JSON.parse('{"description":"","props":{"bsPrefix":{"type":{"name":"string"},"required":false,"description":"","doclets":{"default":"\'dropdown-menu\'"}},"show":{"type":{"name":"bool"},"required":false,"description":"Controls the visibility of the Dropdown menu","doclets":{}},"renderOnMount":{"type":{"name":"bool"},"required":false,"description":"Whether to render the dropdown menu in the DOM before the first time it is shown","doclets":{}},"flip":{"type":{"name":"bool"},"required":false,"description":"Have the dropdown switch to it\'s opposite placement when necessary to stay on screen.","defaultValue":{"value":"true","computed":false},"doclets":{}},"align":{"type":{"name":"custom","raw":"alignPropType"},"required":false,"description":"Aligns the dropdown menu to the specified side of the container. You can also align\\nthe menu responsively for breakpoints starting at `sm` and up. The alignment\\ndirection will affect the specified breakpoint or larger.\\n\\n*Note: Using responsive alignment will disable Popper usage for positioning.*","doclets":{"type":"{\\"start\\"|\\"end\\"|{ sm: \\"start\\"|\\"end\\" }|{ md: \\"start\\"|\\"end\\" }|{ lg: \\"start\\"|\\"end\\" }|{ xl: \\"start\\"|\\"end\\"}|{ xxl: \\"start\\"|\\"end\\"} }"}},"rootCloseEvent":{"type":{"name":"enum","value":[{"value":"\'click\'","computed":false},{"value":"\'mousedown\'","computed":false}]},"required":false,"description":"Which event when fired outside the component will cause it to be closed\\n\\n*Note: For custom dropdown components, you will have to pass the\\n`rootCloseEvent` to `<RootCloseWrapper>` in your custom dropdown menu\\ncomponent ([similarly to how it is implemented in `<Dropdown.Menu>`](https://github.com/react-bootstrap/react-bootstrap/blob/v0.31.5/src/DropdownMenu.js#L115-L119)).*","doclets":{}},"as":{"type":{"name":"elementType"},"required":false,"description":"Control the rendering of the DropdownMenu. All non-menu props\\n(listed here) are passed through to the `as` Component.\\n\\nIf providing a custom, non DOM, component. the `show`, `close` and `align` props\\nare also injected and should be handled appropriately.","defaultValue":{"value":"\'div\'","computed":false},"doclets":{}},"popperConfig":{"type":{"name":"object"},"required":false,"description":"A set of popper options and props passed directly to Popper.","doclets":{}},"variant":{"type":{"name":"string"},"required":false,"description":"Menu color variant.\\n\\nOmitting this will use the default light color.","doclets":{}}}}')}}]);