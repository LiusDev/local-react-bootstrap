"use strict";(self.webpackChunkreact_bootstrap_website=self.webpackChunkreact_bootstrap_website||[]).push([[7788],{3905:(e,o,r)=>{r.d(o,{Zo:()=>s,kt:()=>f});var n=r(67294);function t(e,o,r){return o in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r,e}function l(e,o){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);o&&(n=n.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var o=1;o<arguments.length;o++){var r=null!=arguments[o]?arguments[o]:{};o%2?l(Object(r),!0).forEach((function(o){t(e,o,r[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(r,o))}))}return e}function i(e,o){if(null==e)return{};var r,n,t=function(e,o){if(null==e)return{};var r,n,t={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],o.indexOf(r)>=0||(t[r]=e[r]);return t}(e,o);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],o.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var m=n.createContext({}),p=function(e){var o=n.useContext(m),r=o;return e&&(r="function"==typeof e?e(o):a(a({},o),e)),r},s=function(e){var o=p(e.components);return n.createElement(m.Provider,{value:o},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var o=e.children;return n.createElement(n.Fragment,{},o)}},c=n.forwardRef((function(e,o){var r=e.components,t=e.mdxType,l=e.originalType,m=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=p(r),c=t,f=d["".concat(m,".").concat(c)]||d[c]||u[c]||l;return r?n.createElement(f,a(a({ref:o},s),{},{components:r})):n.createElement(f,a({ref:o},s))}));function f(e,o){var r=arguments,t=o&&o.mdxType;if("string"==typeof e||t){var l=r.length,a=new Array(l);a[0]=c;var i={};for(var m in o)hasOwnProperty.call(o,m)&&(i[m]=o[m]);i.originalType=e,i[d]="string"==typeof e?e:t,a[1]=i;for(var p=2;p<l;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},16259:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>x,contentTitle:()=>c,default:()=>k,frontMatter:()=>u,metadata:()=>f,toc:()=>F});var n=r(87462),t=(r(67294),r(3905));const l='import Form from \'react-bootstrap/Form\';\n\nfunction TextControlsExample() {\n  return (\n    <Form>\n      <Form.Group className="mb-3" controlId="exampleForm.ControlInput1">\n        <Form.Label>Email address</Form.Label>\n        <Form.Control type="email" placeholder="name@example.com" />\n      </Form.Group>\n      <Form.Group className="mb-3" controlId="exampleForm.ControlTextarea1">\n        <Form.Label>Example textarea</Form.Label>\n        <Form.Control as="textarea" rows={3} />\n      </Form.Group>\n    </Form>\n  );\n}\n\nexport default TextControlsExample;\n',a='import Form from \'react-bootstrap/Form\';\n\nfunction InputSizesExample() {\n  return (\n    <>\n      <Form.Control size="lg" type="text" placeholder="Large text" />\n      <br />\n      <Form.Control type="text" placeholder="Normal text" />\n      <br />\n      <Form.Control size="sm" type="text" placeholder="Small text" />\n    </>\n  );\n}\n\nexport default InputSizesExample;\n',i='import Form from \'react-bootstrap/Form\';\n\nfunction FormControlDisabledExample() {\n  return (\n    <>\n      <Form.Control\n        type="text"\n        placeholder="Disabled input"\n        aria-label="Disabled input example"\n        disabled\n        readOnly\n      />\n      <br />\n      <Form.Control\n        type="text"\n        placeholder="Disabled readonly input"\n        aria-label="Disabled input example"\n        readOnly\n      />\n    </>\n  );\n}\n\nexport default FormControlDisabledExample;\n',m='import Form from \'react-bootstrap/Form\';\n\nfunction InputReadOnlyExample() {\n  return (\n    <Form.Control type="text" placeholder="Readonly input here..." readOnly />\n  );\n}\n\nexport default InputReadOnlyExample;\n',p='import Col from \'react-bootstrap/Col\';\nimport Form from \'react-bootstrap/Form\';\nimport Row from \'react-bootstrap/Row\';\n\nfunction PlaintextExample() {\n  return (\n    <Form>\n      <Form.Group as={Row} className="mb-3" controlId="formPlaintextEmail">\n        <Form.Label column sm="2">\n          Email\n        </Form.Label>\n        <Col sm="10">\n          <Form.Control plaintext readOnly defaultValue="email@example.com" />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} className="mb-3" controlId="formPlaintextPassword">\n        <Form.Label column sm="2">\n          Password\n        </Form.Label>\n        <Col sm="10">\n          <Form.Control type="password" placeholder="Password" />\n        </Col>\n      </Form.Group>\n    </Form>\n  );\n}\n\nexport default PlaintextExample;\n',s='import Form from \'react-bootstrap/Form\';\n\nfunction FormFileExample() {\n  return (\n    <>\n      <Form.Group controlId="formFile" className="mb-3">\n        <Form.Label>Default file input example</Form.Label>\n        <Form.Control type="file" />\n      </Form.Group>\n      <Form.Group controlId="formFileMultiple" className="mb-3">\n        <Form.Label>Multiple files input example</Form.Label>\n        <Form.Control type="file" multiple />\n      </Form.Group>\n      <Form.Group controlId="formFileDisabled" className="mb-3">\n        <Form.Label>Disabled file input example</Form.Label>\n        <Form.Control type="file" disabled />\n      </Form.Group>\n      <Form.Group controlId="formFileSm" className="mb-3">\n        <Form.Label>Small file input example</Form.Label>\n        <Form.Control type="file" size="sm" />\n      </Form.Group>\n      <Form.Group controlId="formFileLg" className="mb-3">\n        <Form.Label>Large file input example</Form.Label>\n        <Form.Control type="file" size="lg" />\n      </Form.Group>\n    </>\n  );\n}\n\nexport default FormFileExample;\n',d='import Form from \'react-bootstrap/Form\';\n\nfunction ColorPickerExample() {\n  return (\n    <>\n      <Form.Label htmlFor="exampleColorInput">Color picker</Form.Label>\n      <Form.Control\n        type="color"\n        id="exampleColorInput"\n        defaultValue="#563d7c"\n        title="Choose your color"\n      />\n    </>\n  );\n}\n\nexport default ColorPickerExample;\n',u={title:"Form controls",description:"Give textual form controls like <input>s and <textarea>s an upgrade with custom styles, sizing, focus states, and more.",sidebar_position:2},c=void 0,f={unversionedId:"forms/form-control",id:"forms/form-control",title:"Form controls",description:"Give textual form controls like <input>s and <textarea>s an upgrade with custom styles, sizing, focus states, and more.",source:"@site/docs/forms/form-control.mdx",sourceDirName:"forms",slug:"/forms/form-control",permalink:"/docs/forms/form-control",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Form controls",description:"Give textual form controls like <input>s and <textarea>s an upgrade with custom styles, sizing, focus states, and more.",sidebar_position:2},sidebar:"sidebar",previous:{title:"Overview",permalink:"/docs/forms/overview"},next:{title:"Form text",permalink:"/docs/forms/form-text"}},x={},F=[{value:"Example",id:"example",level:2},{value:"Sizing",id:"sizing",level:2},{value:"Disabled",id:"disabled",level:2},{value:"Readonly",id:"readonly",level:2},{value:"Readonly plain text",id:"readonly-plain-text",level:2},{value:"File input",id:"file-input",level:2},{value:"Color",id:"color",level:2},{value:"API",id:"api",level:2},{value:"FormControl",id:"formcontrol",level:3}],b=e=>function(o){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,t.kt)("div",o)},y=b("CodeBlock"),v=b("PropsTable"),C={toc:F},g="wrapper";function k(e){let{components:o,...r}=e;return(0,t.kt)(g,(0,n.Z)({},C,r,{components:o,mdxType:"MDXLayout"}),(0,t.kt)("h2",{id:"example"},"Example"),(0,t.kt)("p",null,"For textual form controls\u2014like ",(0,t.kt)("inlineCode",{parentName:"p"},"input"),"s and ",(0,t.kt)("inlineCode",{parentName:"p"},"textarea"),"s\u2014use the ",(0,t.kt)("inlineCode",{parentName:"p"},"FormControl")," component.\nFormControl adds some additional styles for general appearance, focus\nstate, sizing, and more."),(0,t.kt)(y,{language:"jsx",live:!0,mdxType:"CodeBlock"},l),(0,t.kt)("h2",{id:"sizing"},"Sizing"),(0,t.kt)("p",null,"Use ",(0,t.kt)("inlineCode",{parentName:"p"},"size")," on ",(0,t.kt)("inlineCode",{parentName:"p"},"<FormControl>")," to change the size of the input."),(0,t.kt)(y,{language:"jsx",live:!0,mdxType:"CodeBlock"},a),(0,t.kt)("h2",{id:"disabled"},"Disabled"),(0,t.kt)("p",null,"Add the ",(0,t.kt)("inlineCode",{parentName:"p"},"disabled")," prop on an input to give it a grayed out appearance and remove pointer events."),(0,t.kt)(y,{language:"jsx",live:!0,mdxType:"CodeBlock"},i),(0,t.kt)("h2",{id:"readonly"},"Readonly"),(0,t.kt)("p",null,"Add the ",(0,t.kt)("inlineCode",{parentName:"p"},"readOnly")," prop on an input to prevent modification\nof the input's value. Read-only inputs appear lighter (just like\ndisabled inputs), but retain the standard cursor."),(0,t.kt)(y,{language:"jsx",live:!0,mdxType:"CodeBlock"},m),(0,t.kt)("h2",{id:"readonly-plain-text"},"Readonly plain text"),(0,t.kt)("p",null,"If you want to have readonly elements in your form styled as plain text,\nuse the ",(0,t.kt)("inlineCode",{parentName:"p"},"plaintext")," prop on FormControls to remove the\ndefault form field styling and preserve the correct margin and padding."),(0,t.kt)(y,{language:"jsx",live:!0,mdxType:"CodeBlock"},p),(0,t.kt)("h2",{id:"file-input"},"File input"),(0,t.kt)(y,{language:"jsx",live:!0,mdxType:"CodeBlock"},s),(0,t.kt)("h2",{id:"color"},"Color"),(0,t.kt)(y,{language:"jsx",live:!0,mdxType:"CodeBlock"},d),(0,t.kt)("h2",{id:"api"},"API"),(0,t.kt)("h3",{id:"formcontrol"},"FormControl"),(0,t.kt)(v,{name:"FormControl",mdxType:"PropsTable"}))}k.isMDXComponent=!0}}]);