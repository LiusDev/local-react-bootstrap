"use strict";(self.webpackChunkreact_bootstrap_website=self.webpackChunkreact_bootstrap_website||[]).push([[7324],{3905:(t,n,e)=>{e.d(n,{Zo:()=>p,kt:()=>m});var o=e(67294);function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function r(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,o)}return e}function l(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?r(Object(e),!0).forEach((function(n){a(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function i(t,n){if(null==t)return{};var e,o,a=function(t,n){if(null==t)return{};var e,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)e=r[o],n.indexOf(e)>=0||(a[e]=t[e]);return a}(t,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)e=r[o],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(a[e]=t[e])}return a}var u=o.createContext({}),s=function(t){var n=o.useContext(u),e=n;return t&&(e="function"==typeof t?t(n):l(l({},n),t)),e},p=function(t){var n=s(t.components);return o.createElement(u.Provider,{value:n},t.children)},d="mdxType",c={inlineCode:"code",wrapper:function(t){var n=t.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(t,n){var e=t.components,a=t.mdxType,r=t.originalType,u=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),d=s(e),g=a,m=d["".concat(u,".").concat(g)]||d[g]||c[g]||r;return e?o.createElement(m,l(l({ref:n},p),{},{components:e})):o.createElement(m,l({ref:n},p))}));function m(t,n){var e=arguments,a=n&&n.mdxType;if("string"==typeof t||a){var r=e.length,l=new Array(r);l[0]=g;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=t,i[d]="string"==typeof t?t:a,l[1]=i;for(var s=2;s<r;s++)l[s]=e[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,e)}g.displayName="MDXCreateElement"},80276:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>h,contentTitle:()=>b,default:()=>N,frontMatter:()=>v,metadata:()=>k,toc:()=>f});var o=e(87462),a=(e(67294),e(3905));const r='import Button from \'react-bootstrap/Button\';\n\nfunction ActiveExample() {\n  return (\n    <>\n      <Button variant="primary" size="lg" active>\n        Primary button\n      </Button>{\' \'}\n      <Button variant="secondary" size="lg" active>\n        Button\n      </Button>\n    </>\n  );\n}\n\nexport default ActiveExample;\n',l='import Button from \'react-bootstrap/Button\';\n\nfunction BlockExample() {\n  return (\n    <div className="d-grid gap-2">\n      <Button variant="primary" size="lg">\n        Block level button\n      </Button>\n      <Button variant="secondary" size="lg">\n        Block level button\n      </Button>\n    </div>\n  );\n}\n\nexport default BlockExample;\n',i='import Button from \'react-bootstrap/Button\';\n\nfunction DisabledExample() {\n  return (\n    <>\n      <Button variant="primary" size="lg" disabled>\n        Primary button\n      </Button>{\' \'}\n      <Button variant="secondary" size="lg" disabled>\n        Button\n      </Button>{\' \'}\n      <Button href="#" variant="secondary" size="lg" disabled>\n        Link\n      </Button>\n    </>\n  );\n}\n\nexport default DisabledExample;\n',u="import { useEffect, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\n\nfunction LoadingButton() {\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    function simulateNetworkRequest() {\n      return new Promise((resolve) => setTimeout(resolve, 2000));\n    }\n\n    if (isLoading) {\n      simulateNetworkRequest().then(() => {\n        setLoading(false);\n      });\n    }\n  }, [isLoading]);\n\n  const handleClick = () => setLoading(true);\n\n  return (\n    <Button\n      variant=\"primary\"\n      disabled={isLoading}\n      onClick={!isLoading ? handleClick : null}\n    >\n      {isLoading ? 'Loading\u2026' : 'Click to load'}\n    </Button>\n  );\n}\n\nexport default LoadingButton;\n",s="import Button from 'react-bootstrap/Button';\n\nfunction OutlineTypesExample() {\n  return (\n    <>\n      <Button variant=\"outline-primary\">Primary</Button>{' '}\n      <Button variant=\"outline-secondary\">Secondary</Button>{' '}\n      <Button variant=\"outline-success\">Success</Button>{' '}\n      <Button variant=\"outline-warning\">Warning</Button>{' '}\n      <Button variant=\"outline-danger\">Danger</Button>{' '}\n      <Button variant=\"outline-info\">Info</Button>{' '}\n      <Button variant=\"outline-light\">Light</Button>{' '}\n      <Button variant=\"outline-dark\">Dark</Button>\n    </>\n  );\n}\n\nexport default OutlineTypesExample;\n",p='import Button from \'react-bootstrap/Button\';\n\nfunction SizesExample() {\n  return (\n    <>\n      <div className="mb-2">\n        <Button variant="primary" size="lg">\n          Large button\n        </Button>{\' \'}\n        <Button variant="secondary" size="lg">\n          Large button\n        </Button>\n      </div>\n      <div>\n        <Button variant="primary" size="sm">\n          Small button\n        </Button>{\' \'}\n        <Button variant="secondary" size="sm">\n          Small button\n        </Button>\n      </div>\n    </>\n  );\n}\n\nexport default SizesExample;\n',d='import Button from \'react-bootstrap/Button\';\n\nfunction TagTypesExample() {\n  return (\n    <>\n      <Button href="#">Link</Button> <Button type="submit">Button</Button>{\' \'}\n      <Button as="input" type="button" value="Input" />{\' \'}\n      <Button as="input" type="submit" value="Submit" />{\' \'}\n      <Button as="input" type="reset" value="Reset" />\n    </>\n  );\n}\n\nexport default TagTypesExample;\n',c='import { useState } from \'react\';\nimport ButtonGroup from \'react-bootstrap/ButtonGroup\';\nimport ToggleButton from \'react-bootstrap/ToggleButton\';\n\nfunction ToggleButtonExample() {\n  const [checked, setChecked] = useState(false);\n  const [radioValue, setRadioValue] = useState(\'1\');\n\n  const radios = [\n    { name: \'Active\', value: \'1\' },\n    { name: \'Radio\', value: \'2\' },\n    { name: \'Radio\', value: \'3\' },\n  ];\n\n  return (\n    <>\n      <ButtonGroup className="mb-2">\n        <ToggleButton\n          id="toggle-check"\n          type="checkbox"\n          variant="secondary"\n          checked={checked}\n          value="1"\n          onChange={(e) => setChecked(e.currentTarget.checked)}\n        >\n          Checked\n        </ToggleButton>\n      </ButtonGroup>\n      <br />\n      <ButtonGroup className="mb-2">\n        {radios.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            id={`radio-${idx}`}\n            type="radio"\n            variant="secondary"\n            name="radio"\n            value={radio.value}\n            checked={radioValue === radio.value}\n            onChange={(e) => setRadioValue(e.currentTarget.value)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n      </ButtonGroup>\n      <br />\n      <ToggleButton\n        className="mb-2"\n        id="toggle-check"\n        type="checkbox"\n        variant="outline-primary"\n        checked={checked}\n        value="1"\n        onChange={(e) => setChecked(e.currentTarget.checked)}\n      >\n        Checked\n      </ToggleButton>\n      <br />\n      <ButtonGroup>\n        {radios.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            id={`radio-${idx}`}\n            type="radio"\n            variant={idx % 2 ? \'outline-success\' : \'outline-danger\'}\n            name="radio"\n            value={radio.value}\n            checked={radioValue === radio.value}\n            onChange={(e) => setRadioValue(e.currentTarget.value)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n      </ButtonGroup>\n    </>\n  );\n}\n\nexport default ToggleButtonExample;\n',g='import { useState } from \'react\';\nimport ToggleButton from \'react-bootstrap/ToggleButton\';\nimport ToggleButtonGroup from \'react-bootstrap/ToggleButtonGroup\';\n\nfunction ToggleButtonGroupControlled() {\n  const [value, setValue] = useState([1, 3]);\n\n  /*\n   * The second argument that will be passed to\n   * `handleChange` from `ToggleButtonGroup`\n   * is the SyntheticEvent object, but we are\n   * not using it in this example so we will omit it.\n   */\n  const handleChange = (val) => setValue(val);\n\n  return (\n    <ToggleButtonGroup type="checkbox" value={value} onChange={handleChange}>\n      <ToggleButton id="tbg-btn-1" value={1}>\n        Option 1\n      </ToggleButton>\n      <ToggleButton id="tbg-btn-2" value={2}>\n        Option 2\n      </ToggleButton>\n      <ToggleButton id="tbg-btn-3" value={3}>\n        Option 3\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n\nexport default ToggleButtonGroupControlled;\n',m='import ToggleButton from \'react-bootstrap/ToggleButton\';\nimport ToggleButtonGroup from \'react-bootstrap/ToggleButtonGroup\';\n\nfunction ToggleButtonGroupUncontrolled() {\n  return (\n    <>\n      <ToggleButtonGroup type="checkbox" defaultValue={[1, 3]} className="mb-2">\n        <ToggleButton id="tbg-check-1" value={1}>\n          Checkbox 1 (pre-checked)\n        </ToggleButton>\n        <ToggleButton id="tbg-check-2" value={2}>\n          Checkbox 2\n        </ToggleButton>\n        <ToggleButton id="tbg-check-3" value={3}>\n          Checkbox 3 (pre-checked)\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <br />\n      <ToggleButtonGroup type="radio" name="options" defaultValue={1}>\n        <ToggleButton id="tbg-radio-1" value={1}>\n          Radio 1 (pre-checked)\n        </ToggleButton>\n        <ToggleButton id="tbg-radio-2" value={2}>\n          Radio 2\n        </ToggleButton>\n        <ToggleButton id="tbg-radio-3" value={3}>\n          Radio 3\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </>\n  );\n}\n\nexport default ToggleButtonGroupUncontrolled;\n',B='import Button from \'react-bootstrap/Button\';\n\nfunction TypesExample() {\n  return (\n    <>\n      <Button variant="primary">Primary</Button>{\' \'}\n      <Button variant="secondary">Secondary</Button>{\' \'}\n      <Button variant="success">Success</Button>{\' \'}\n      <Button variant="warning">Warning</Button>{\' \'}\n      <Button variant="danger">Danger</Button>{\' \'}\n      <Button variant="info">Info</Button>{\' \'}\n      <Button variant="light">Light</Button>{\' \'}\n      <Button variant="dark">Dark</Button>\n      <Button variant="link">Link</Button>\n    </>\n  );\n}\n\nexport default TypesExample;\n',v={title:"Buttons",description:"Use Bootstrap\u2019s custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more."},b=void 0,k={unversionedId:"components/buttons",id:"components/buttons",title:"Buttons",description:"Use Bootstrap\u2019s custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.",source:"@site/docs/components/buttons.mdx",sourceDirName:"components",slug:"/components/buttons",permalink:"/docs/components/buttons",draft:!1,tags:[],version:"current",frontMatter:{title:"Buttons",description:"Use Bootstrap\u2019s custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more."},sidebar:"sidebar",previous:{title:"Button group",permalink:"/docs/components/button-group"},next:{title:"Cards",permalink:"/docs/components/cards"}},h={},f=[{value:"Examples",id:"examples",level:2},{value:"Outline buttons",id:"outline-buttons",level:3},{value:"Button tags",id:"button-tags",level:2},{value:"Sizes",id:"sizes",level:2},{value:"Block buttons",id:"block-buttons",level:2},{value:"Active state",id:"active-state",level:2},{value:"Disabled state",id:"disabled-state",level:3},{value:"Button loading state",id:"button-loading-state",level:2},{value:"Checkbox / Radio",id:"checkbox--radio",level:2},{value:"Uncontrolled",id:"uncontrolled",level:4},{value:"Controlled",id:"controlled",level:4},{value:"API",id:"api",level:2},{value:"Button",id:"button",level:3},{value:"ToggleButtonGroup",id:"togglebuttongroup",level:3},{value:"ToggleButton",id:"togglebutton",level:3}],y=t=>function(n){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},T=y("CodeBlock"),x=y("PropsTable"),C={toc:f},w="wrapper";function N(t){let{components:n,...e}=t;return(0,a.kt)(w,(0,o.Z)({},C,e,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Use any of the available button style types to quickly create a styled\nbutton. Just modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"variant")," prop."),(0,a.kt)(T,{language:"jsx",live:!0,mdxType:"CodeBlock"},B),(0,a.kt)("h3",{id:"outline-buttons"},"Outline buttons"),(0,a.kt)("p",null,"For a lighter touch, Buttons also come in ",(0,a.kt)("inlineCode",{parentName:"p"},"outline-*"),"\nvariants with no background color."),(0,a.kt)(T,{language:"jsx",live:!0,mdxType:"CodeBlock"},s),(0,a.kt)("h2",{id:"button-tags"},"Button tags"),(0,a.kt)("p",null,"Normally ",(0,a.kt)("inlineCode",{parentName:"p"},"<Button>")," components will render a HTML\n",(0,a.kt)("inlineCode",{parentName:"p"},"<button>")," element. However you can render whatever you'd\nlike, adding a ",(0,a.kt)("inlineCode",{parentName:"p"},"href")," prop will automatically render an\n",(0,a.kt)("inlineCode",{parentName:"p"},"<a />")," element. You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"as")," prop to\nrender whatever your heart desires. React Bootstrap will take care of\nthe proper ARIA roles for you."),(0,a.kt)(T,{language:"jsx",live:!0,mdxType:"CodeBlock"},d),(0,a.kt)("h2",{id:"sizes"},"Sizes"),(0,a.kt)("p",null,"Fancy larger or smaller buttons? Add ",(0,a.kt)("inlineCode",{parentName:"p"},'size="lg"'),",\n",(0,a.kt)("inlineCode",{parentName:"p"},'size="sm"')," for additional sizes."),(0,a.kt)(T,{language:"jsx",live:!0,mdxType:"CodeBlock"},p),(0,a.kt)("h2",{id:"block-buttons"},"Block buttons"),(0,a.kt)("p",null,"Create responsive stacks of full-width, \u201cblock buttons\u201d like those in Bootstrap 4\nwith a mix of our display and gap utilities."),(0,a.kt)(T,{language:"jsx",live:!0,mdxType:"CodeBlock"},l),(0,a.kt)("h2",{id:"active-state"},"Active state"),(0,a.kt)("p",null,"To set a button's active state simply set the component's\n",(0,a.kt)("inlineCode",{parentName:"p"},"active")," prop."),(0,a.kt)(T,{language:"jsx",live:!0,mdxType:"CodeBlock"},r),(0,a.kt)("h3",{id:"disabled-state"},"Disabled state"),(0,a.kt)("p",null,"Make buttons look inactive by adding the ",(0,a.kt)("inlineCode",{parentName:"p"},"disabled")," prop to."),(0,a.kt)(T,{language:"jsx",live:!0,mdxType:"CodeBlock"},i),(0,a.kt)("p",null,"Watch out! ",(0,a.kt)("inlineCode",{parentName:"p"},"<a>")," elements don't naturally support a\n",(0,a.kt)("inlineCode",{parentName:"p"},"disabled")," attribute. In browsers that support it this is handled with a\n",(0,a.kt)("inlineCode",{parentName:"p"},"point-events: none")," style but not all browsers support it\nyet."),(0,a.kt)("p",null,"React Bootstrap will prevent any ",(0,a.kt)("inlineCode",{parentName:"p"},"onClick")," handlers from\nfiring regardless of the rendered element."),(0,a.kt)("h2",{id:"button-loading-state"},"Button loading state"),(0,a.kt)("p",null,"When activating an asynchronous action from a button it is a good UX\npattern to give the user feedback as to the loading state, this can\neasily be done by updating your ",(0,a.kt)("inlineCode",{parentName:"p"},"<Button />"),"s\nprops from a state change like below."),(0,a.kt)(T,{language:"jsx",live:!0,mdxType:"CodeBlock"},u),(0,a.kt)("h2",{id:"checkbox--radio"},"Checkbox / Radio"),(0,a.kt)("p",null,"Buttons can also be used to style ",(0,a.kt)("inlineCode",{parentName:"p"},"checkbox")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"radio")," form elements. This is helpful when you want a toggle\nbutton that works neatly inside an HTML form."),(0,a.kt)(T,{language:"jsx",live:!0,mdxType:"CodeBlock"},c),(0,a.kt)("p",null,"The above handles styling, But requires manually controlling the\n",(0,a.kt)("inlineCode",{parentName:"p"},"checked")," state for each radio or checkbox in the group."),(0,a.kt)("p",null,"For a nicer experience with checked state management use the\n",(0,a.kt)("inlineCode",{parentName:"p"},"<ToggleButtonGroup>")," instead of a ",(0,a.kt)("inlineCode",{parentName:"p"},"<ButtonGroup>")," component.\nThe group behaves as a form component, where the ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," is an array of the selected\n",(0,a.kt)("inlineCode",{parentName:"p"},"value"),"s for a named checkbox group or the single toggled\n",(0,a.kt)("inlineCode",{parentName:"p"},"value")," in a similarly named radio group."),(0,a.kt)("h4",{id:"uncontrolled"},"Uncontrolled"),(0,a.kt)(T,{language:"jsx",live:!0,mdxType:"CodeBlock"},m),(0,a.kt)("h4",{id:"controlled"},"Controlled"),(0,a.kt)(T,{language:"jsx",live:!0,mdxType:"CodeBlock"},g),(0,a.kt)("h2",{id:"api"},"API"),(0,a.kt)("h3",{id:"button"},"Button"),(0,a.kt)(x,{name:"Button",mdxType:"PropsTable"}),(0,a.kt)("h3",{id:"togglebuttongroup"},"ToggleButtonGroup"),(0,a.kt)(x,{name:"ToggleButtonGroup",mdxType:"PropsTable"}),(0,a.kt)("h3",{id:"togglebutton"},"ToggleButton"),(0,a.kt)(x,{name:"ToggleButton",mdxType:"PropsTable"}))}N.isMDXComponent=!0}}]);