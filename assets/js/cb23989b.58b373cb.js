"use strict";(self.webpackChunkreact_bootstrap_website=self.webpackChunkreact_bootstrap_website||[]).push([[1129],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(r),u=o,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return r?n.createElement(f,a(a({ref:t},p),{},{components:r})):n.createElement(f,a({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},14607:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>v,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const i='import Form from \'react-bootstrap/Form\';\n\nfunction FormTextExample() {\n  return (\n    <>\n      <Form.Label htmlFor="inputPassword5">Password</Form.Label>\n      <Form.Control\n        type="password"\n        id="inputPassword5"\n        aria-describedby="passwordHelpBlock"\n      />\n      <Form.Text id="passwordHelpBlock" muted>\n        Your password must be 8-20 characters long, contain letters and numbers,\n        and must not contain spaces, special characters, or emoji.\n      </Form.Text>\n    </>\n  );\n}\n\nexport default FormTextExample;\n',a={title:"Form text",description:"Create block-level or inline-level form text.",sidebar_position:3},l=void 0,s={unversionedId:"forms/form-text",id:"forms/form-text",title:"Form text",description:"Create block-level or inline-level form text.",source:"@site/docs/forms/form-text.mdx",sourceDirName:"forms",slug:"/forms/form-text",permalink:"/docs/forms/form-text",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Form text",description:"Create block-level or inline-level form text.",sidebar_position:3},sidebar:"sidebar",previous:{title:"Form controls",permalink:"/docs/forms/form-control"},next:{title:"Select",permalink:"/docs/forms/select"}},c={},p=[{value:"Overview",id:"overview",level:2},{value:"API",id:"api",level:2},{value:"FormText",id:"formtext",level:3}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},d=m("CodeBlock"),u=m("PropsTable"),f={toc:p},b="wrapper";function v(e){let{components:t,...r}=e;return(0,o.kt)(b,(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Block-level help text in forms can be created using ",(0,o.kt)("inlineCode",{parentName:"p"},"<Form.Text>"),". Inline help\ntext can be flexibly implemented using any inline HTML element and utility classes\nlike ",(0,o.kt)("inlineCode",{parentName:"p"},".text-muted"),"."),(0,o.kt)("admonition",{title:"Associating help text with form controls",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Help text should be explicitly associated with the form control it relates to using\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"aria-describedby")," attribute. This will ensure that assistive technologies\u2014such\nas screen readers\u2014will announce this help text when the user focuses or enters\nthe control.")),(0,o.kt)("p",null,"Form text below inputs can be styled with ",(0,o.kt)("inlineCode",{parentName:"p"},"<Form.Text>"),". This component includes\n",(0,o.kt)("inlineCode",{parentName:"p"},"display: block")," and adds some top margin for easy spacing from the inputs above."),(0,o.kt)(d,{language:"jsx",live:!0,mdxType:"CodeBlock"},i),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"formtext"},"FormText"),(0,o.kt)(u,{name:"FormText",mdxType:"PropsTable"}))}v.isMDXComponent=!0}}]);