"use strict";(self.webpackChunkreact_bootstrap_website=self.webpackChunkreact_bootstrap_website||[]).push([[1019],{3905:(n,e,t)=>{t.d(e,{Zo:()=>d,kt:()=>b});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var p=r.createContext({}),l=function(n){var e=r.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},d=function(n){var e=l(n.components);return r.createElement(p.Provider,{value:e},n.children)},m="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,p=n.parentName,d=s(n,["components","mdxType","originalType","parentName"]),m=l(t),u=i,b=m["".concat(p,".").concat(u)]||m[u]||c[u]||a;return t?r.createElement(b,o(o({ref:e},d),{},{components:t})):r.createElement(b,o({ref:e},d))}));function b(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,o=new Array(a);o[0]=u;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=n,s[m]="string"==typeof n?n:i,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},70586:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>b,contentTitle:()=>c,default:()=>h,frontMatter:()=>m,metadata:()=>u,toc:()=>g});var r=t(87462),i=(t(67294),t(3905));const a='import Spinner from \'react-bootstrap/Spinner\';\n\nfunction BasicExample() {\n  return (\n    <Spinner animation="border" role="status">\n      <span className="visually-hidden">Loading...</span>\n    </Spinner>\n  );\n}\n\nexport default BasicExample;\n',o="import Spinner from 'react-bootstrap/Spinner';\n\nfunction BorderExample() {\n  return <Spinner animation=\"border\" />;\n}\n\nexport default BorderExample;\n",s="import Spinner from 'react-bootstrap/Spinner';\n\nfunction GrowExample() {\n  return <Spinner animation=\"grow\" />;\n}\n\nexport default GrowExample;\n",p='import Spinner from \'react-bootstrap/Spinner\';\n\nfunction VariantsExample() {\n  return (\n    <>\n      <Spinner animation="border" variant="primary" />\n      <Spinner animation="border" variant="secondary" />\n      <Spinner animation="border" variant="success" />\n      <Spinner animation="border" variant="danger" />\n      <Spinner animation="border" variant="warning" />\n      <Spinner animation="border" variant="info" />\n      <Spinner animation="border" variant="light" />\n      <Spinner animation="border" variant="dark" />\n      <Spinner animation="grow" variant="primary" />\n      <Spinner animation="grow" variant="secondary" />\n      <Spinner animation="grow" variant="success" />\n      <Spinner animation="grow" variant="danger" />\n      <Spinner animation="grow" variant="warning" />\n      <Spinner animation="grow" variant="info" />\n      <Spinner animation="grow" variant="light" />\n      <Spinner animation="grow" variant="dark" />\n    </>\n  );\n}\n\nexport default VariantsExample;\n',l='import Spinner from \'react-bootstrap/Spinner\';\n\nfunction SizesExample() {\n  return (\n    <>\n      <Spinner animation="border" size="sm" />\n      <Spinner animation="border" />\n      <Spinner animation="grow" size="sm" />\n      <Spinner animation="grow" />\n    </>\n  );\n}\n\nexport default SizesExample;\n',d='import Button from \'react-bootstrap/Button\';\nimport Spinner from \'react-bootstrap/Spinner\';\n\nfunction ButtonExample() {\n  return (\n    <>\n      <Button variant="primary" disabled>\n        <Spinner\n          as="span"\n          animation="border"\n          size="sm"\n          role="status"\n          aria-hidden="true"\n        />\n        <span className="visually-hidden">Loading...</span>\n      </Button>{\' \'}\n      <Button variant="primary" disabled>\n        <Spinner\n          as="span"\n          animation="grow"\n          size="sm"\n          role="status"\n          aria-hidden="true"\n        />\n        Loading...\n      </Button>\n    </>\n  );\n}\n\nexport default ButtonExample;\n',m={title:"Spinners",description:"Spinners can be used to show the loading state in your projects."},c=void 0,u={unversionedId:"components/spinners",id:"components/spinners",title:"Spinners",description:"Spinners can be used to show the loading state in your projects.",source:"@site/docs/components/spinners.mdx",sourceDirName:"components",slug:"/components/spinners",permalink:"/docs/components/spinners",draft:!1,tags:[],version:"current",frontMatter:{title:"Spinners",description:"Spinners can be used to show the loading state in your projects."},sidebar:"sidebar",previous:{title:"Progress bars",permalink:"/docs/components/progress"},next:{title:"Tables",permalink:"/docs/components/table"}},b={},g=[{value:"Example",id:"example",level:2},{value:"Animations",id:"animations",level:2},{value:"Variants",id:"variants",level:2},{value:"Sizing",id:"sizing",level:2},{value:"Buttons",id:"buttons",level:2},{value:"Accessibility",id:"accessibility",level:2},{value:"API",id:"api",level:2},{value:"Spinner",id:"spinner",level:3}],v=n=>function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)},f=v("CodeBlock"),y=v("PropsTable"),k={toc:g},S="wrapper";function h(n){let{components:e,...t}=n;return(0,i.kt)(S,(0,r.Z)({},k,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)(f,{language:"jsx",live:!0,mdxType:"CodeBlock"},a),(0,i.kt)("h2",{id:"animations"},"Animations"),(0,i.kt)("p",null,"Bootstrap offers two animation styles for spinners. The animation style\ncan be configured with the ",(0,i.kt)("inlineCode",{parentName:"p"},"animation")," property. An animation style\nmust always be provided when creating a spinner."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Border Spinner - ",(0,i.kt)("inlineCode",{parentName:"strong"},"border"))),(0,i.kt)(f,{language:"jsx",live:!0,mdxType:"CodeBlock"},o),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Grow Spinner - ",(0,i.kt)("inlineCode",{parentName:"strong"},"grow")," ")),(0,i.kt)(f,{language:"jsx",live:!0,mdxType:"CodeBlock"},s),(0,i.kt)("h2",{id:"variants"},"Variants"),(0,i.kt)("p",null,"All standard visual variants are available for both animation styles by\nsetting the ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," property. Alternatively spinners can be custom\nsized with the ",(0,i.kt)("inlineCode",{parentName:"p"},"style")," property, or custom CSS classes."),(0,i.kt)(f,{language:"jsx",live:!0,mdxType:"CodeBlock"},p),(0,i.kt)("h2",{id:"sizing"},"Sizing"),(0,i.kt)("p",null,"In addition to the standard size, a smaller additional preconfigured\nsize is available by configuring the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," property to ",(0,i.kt)("inlineCode",{parentName:"p"},"sm"),"."),(0,i.kt)(f,{language:"jsx",live:!0,mdxType:"CodeBlock"},l),(0,i.kt)("h2",{id:"buttons"},"Buttons"),(0,i.kt)("p",null,"Like the original Bootstrap spinners, these can also be used with\nbuttons. To use this component out-of-the-box it is recommended you\nchange the element type to ",(0,i.kt)("inlineCode",{parentName:"p"},"span")," by configuring the ",(0,i.kt)("inlineCode",{parentName:"p"},"as")," property when\nusing spinners inside buttons."),(0,i.kt)(f,{language:"jsx",live:!0,mdxType:"CodeBlock"},d),(0,i.kt)("h2",{id:"accessibility"},"Accessibility"),(0,i.kt)("p",null,"To ensure the maximum accessibility for spinner components it is\nrecommended you provide a relevant ARIA ",(0,i.kt)("inlineCode",{parentName:"p"},"role")," property,\nand include screenreader-only readable text representation of the\nspinner's meaning inside the component using Bootstrap's ",(0,i.kt)("inlineCode",{parentName:"p"},"visually-hidden"),"\nclass."),(0,i.kt)("p",null,"The example below provides an example of accessible usage of this\ncomponent."),(0,i.kt)(f,{language:"jsx",live:!0,mdxType:"CodeBlock"},a),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("h3",{id:"spinner"},"Spinner"),(0,i.kt)(y,{name:"Spinner",mdxType:"PropsTable"}))}h.isMDXComponent=!0}}]);